<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Travelguru_Model extends CI_Model {    function __construct() {        parent::__construct();    }    function getApiAuthDetails($api) {        $this->db->select('*');        $this->db->from('api_info');        $this->db->where('api_name', $api);        $this->db->where('service_type', 1);        $this->db->where('status', 1);        $this->db->limit('1');        $query = $this->db->get();        if ($query->num_rows > 0) {            return $query->row();        } else {            return '';        }    }    public function checkCityCode($cityCode) {        $this->db->select('city_name,city_id');        $this->db->from('tg_city_list');        $this->db->where('city_name', trim($cityCode));        $this->db->limit('1');        $query = $this->db->get();//echo $this->db->last_query();        if ($query->num_rows() > 0)            return $query->row();        else            return '';    }    function detail_calculate_rate($amountbeforetax = 0, $discount = 0, $tax = 0, $additionalguest, $addguestdiscout) {        $amnt = 0;        for ($a = 0; $a < count($additionalguest); $a++) {            if (isset($additionalguest[$a])) {                $gues = $additionalguest[$a];            } else {                $gues = 0;            }            if (isset($addguestdiscout[$a])) {                $disc = $addguestdiscout[$a];            } else {                $disc = 0;            }            $amnt+= ($gues - $disc);        }        $hotelsearch_data = $this->session->userdata('hotel_search_data');        //$netrate = (($amountbeforetax - $discount) + ($amnt) + ($tax)) * ($hotelsearch_data['nights']);        $netrate = (($amountbeforetax - $discount) + ($amnt) + ($tax));        $amnttosend=(($amountbeforetax - $discount) + ($amnt));		        return array($netrate,$amnttosend);    }    function get_b2c_markup() {        $this->db->select('markup');        $this->db->from('b2c_markup_info');        $this->db->where('markup_type', 'specific');        $this->db->where('service_type', 1);        $this->db->where('status', 1);        $this->db->where('api_name', 'travelguru');        $this->db->limit('1');        $query = $this->db->get();        if ($query->num_rows > 0) {            return $query->row();        } else {            $this->db->select('markup');            $this->db->from('b2c_markup_info');            $this->db->where('markup_type', 'generic');            $this->db->where('service_type', 1);            $this->db->where('api_name', 'travelguru');            $this->db->where('status', 1);            $this->db->limit('1');            $query = $this->db->get();            if ($query->num_rows > 0) {                return $query->row();            } else {                return 0;            }        }    }    function get_b2c_paymentcharge() {        $this->db->select('charge');        $this->db->from('payment_gateway');        $this->db->where('service_type', 1);        $this->db->where('status', 1);        $this->db->limit('1');        $query3 = $this->db->get();        if ($query3->num_rows > 0) {            $res3 = $query3->row();            return $res3->charge;        } else {            return 0;        }    }    public function delete_temp_results($sess_id) {        $this->db->where('session_id', $sess_id);        $this->db->delete('hotel_search_result');    }    public function insert_hotels_avail_data($insertrooms) {    //    $this->db->insert_batch('hotel_search_result', $insertrooms);      $this->db->insert_batch('hotel_search_result', $insertrooms);  }  function checkpermanent($HotelCode) {    $this->db->select('*')    ->from('tg_permanent_hotels')    ->where('hotel_code', $HotelCode);    $query = $this->db->get();    if ($query->num_rows > 0) {        return 1;    } else {        return 0;    }}function gethotel_static_tg($HotelCode) {    $this->db->select('*')    ->from('tg_hotel_overview')    ->where('hotel_code', $HotelCode);    $query = $this->db->get();    if ($query->num_rows > 0) {        return $query->row();    } else {        return false;    }}function gethotel_static_tg1($start) {    $this->db->select('*')    ->from('tg_hotel_overview');             //   ->where('hotel_code', $HotelCode);    $this->db->limit(2000,$start);    $query = $this->db->get();    if ($query->num_rows > 0) {        return $query->result();    } else {        return false;    }}function getHotel_facilities($HotelCode) {    $this->db->select('*')    ->from('tg_hotel_facilities')    ->where('hotel_code', $HotelCode)->order_by('amenity_type', 'ASC');    $query = $this->db->get();    if ($query->num_rows > 0) {        return $query->result();    } else {        return false;    }	}function insertpermanent_tg($hotel_overview) {    $data = array(        'api' => 'travelguru',        'hotel_code' => $hotel_overview->hotel_code,        'hotel_name' => $hotel_overview->hotel_name,        'city' => $hotel_overview->city,        'star' => $hotel_overview->star_rating,        'image' => $hotel_overview->image_path,        'description' => $hotel_overview->hotel_overview,        'location' => $hotel_overview->address1,        'latitude' => $hotel_overview->latitude,        'longitude' => $hotel_overview->longitude,        'room_facilities' => $hotel_overview->facilities,        'address' => $hotel_overview->address,        'time_checkin' => $hotel_overview->time_checkin,        'time_checkout' => $hotel_overview->time_checkout,        );    $this->db->insert('tg_permanent_hotels', $data);}public function fetch_search_result($sess_id,$uniqueRefNo, $api) { $this->db->select('m.*,n.*'); $this->db->from('hotel_search_result as n'); $this->db->join('tg_permanent_hotels as m', 'm.hotel_code=n.hotel_code'); $this->db->where('n.session_id', $sess_id); $this->db->where('n.uniqueRefNo', $uniqueRefNo); $this->db->where('n.api', $api); $this->db->group_by('n.hotel_code'); $this->db->order_by('n.total_amount', 'DESC'); $query = $this->db->get(); echo $this->db->last_query(); if ($query->num_rows > 0) {    return $query->result();} else {    return '';}}public function get_nearby_hotels($sess_id,$uniqueRefNo,  $hotelCode, $lat, $long, $city) {    //$this->db->select("*,(((acos(sin(($lat*pi()/180)) * sin((`Latitude`*pi()/180))+cos(($lat*pi()/180)) * cos((`Latitude`*pi()/180)) * cos((($long- `Longitude`)*pi()/180))))*180/pi())*60*1.1515*1.609344) as distance");    $this->db->select('*');    $this->db->from('hotel_search_result h');    $this->db->join('api_permanent_hotels p', 'h.hotel_code = p.hotel_code');        //$this->db->where('p.Destination', $city);    $this->db->where('p.hotel_code !=', $hotelCode);    //$this->db->where('h.uniqueRefNo', $uniqueRefNo);    $this->db->where('h.session_id', $sess_id);    $this->db->group_by('p.hotel_name');    //$this->db->having('distance <', 9);    $this->db->where('p.star !=',0);  $this->db->where('h.pricecomp !=',0);    $this->db->limit(3);    $query = $this->db->get();// echo $this->db->last_query();exit;    if ($query->num_rows > 0) {        return $query->result();    } else {        return '';    }}public function get_related_hotels($sess_id,$uniqueRefNo, $hotelCode, $lat, $long, $city) {    $this->db->select("*,(((acos(sin(($lat*pi()/180)) * sin((`Latitude`*pi()/180))+cos(($lat*pi()/180)) * cos((`Latitude`*pi()/180)) * cos((($long- `Longitude`)*pi()/180))))*180/pi())*60*1.1515*1.609344) as distance");    $this->db->from('hotel_search_result h');    $this->db->join('tg_permanent_hotels p', 'h.hotel_code = p.hotel_code');        //$this->db->where('p.Destination', $city);    $this->db->where('p.hotel_code !=', $hotelCode);    $this->db->where('h.uniqueRefNo', $uniqueRefNo);    $this->db->where('h.session_id', $sess_id);    $this->db->group_by('p.hotel_name');    $this->db->having('distance >', 9);    $this->db->limit(4);    $query = $this->db->get();    if ($query->num_rows() == '') {        return '';    } else {        return $query->result();    }}public function getHotelDetails($hotelCode, $searchId) {    $this->db->select('*');    $this->db->from('hotel_search_result t');    $this->db->join('tg_permanent_hotels p', 't.hotel_code = p.hotel_code');    $this->db->where('t.search_id', $searchId);    $this->db->where('t.hotel_code', $hotelCode);	   //$this->db->where('t.search_id',1789);       //$this->db->where('t.hotel_code',00020639);    $query = $this->db->get();		//echo $this->db->last_query();exit;        if ($query->num_rows() > 0){ //print_r($query->result());exit;            return $query->row();        }else {             return '';        }    }    public function getHotelImages($hotelCode) {        $this->db->select('*');        $this->db->from('tg_hotel_images');        $this->db->where('hotel_code', $hotelCode);        $query = $this->db->get();//echo $this->db->last_query();exit;        if ($query->num_rows() > 0){            return $query->result();        }else{             return '';        }    }    public function getHotelImagesyatra($hotelCode) {        $this->db->select('*');        $this->db->from('tg_hotel_images_yatra');        $this->db->where('hotel_code', $hotelCode);        $query = $this->db->get();//echo $this->db->last_query();exit;        if ($query->num_rows() > 0){            return $query->result();        }else{             $this->db->select('*');            $this->db->from('tg_hotel_images');            $this->db->where('hotel_code', $hotelCode);            $query = $this->db->get();            return $query->result();        }    }    public function getHotelImages1($hotelCode) {        // $this->db->select('*');        // $this->db->from('tg_hotel_images');        // $this->db->where('hotel_code', $hotelCode);        // $this->db->where('content_title !=', '');        // $query = $this->db->get();        // if ($query->num_rows() > 0){        //     return $query->result();        // }else{         //     return '';        // }         $this->db->select('*');        $this->db->from('tg_hotel_images_yatra');        $this->db->where('hotel_code', $hotelCode);        $query = $this->db->get();//echo $this->db->last_query();exit;        if ($query->num_rows() > 0){            return $query->result();        }else{             $this->db->select('*');            $this->db->from('tg_hotel_images');            $this->db->where('hotel_code', $hotelCode);            $query = $this->db->get();            return $query->result();        }    }    public function getHotelReviews($hotelCode) {        $this->db->select('*');        $this->db->from('tg_hotel_reviews');        $this->db->where('hotel_code', $hotelCode);        $query = $this->db->get();        if ($query->num_rows() > 0){            return $query->result();        }else{            return '';        }    }    public function getHotelDescriptions($hotelCode) {        $this->db->select('HotelInfo as description');        $this->db->from('tg_hotel_overview');        $this->db->where('hotel_code', $hotelCode);        $this->db->limit('1');        $query = $this->db->get();        if ($query->num_rows() > 0)            return $query->row();        else            return '';    }    public function get_hotel_rooms($session_id,$uniqueRefNo, $hotelCode,$hotel_id) {        $this->db->select('t.*,p.*');        $this->db->from('hotel_search_result t');        $this->db->join('tg_permanent_hotels p', 't.hotel_code = p.hotel_code');        $this->db->where('t.uniqueRefNo',$uniqueRefNo);        $this->db->where('t.session_id', $session_id);        $this->db->where('t.hotel_code', $hotelCode);        $this->db->where('search_id !=', $hotel_id);        $this->db->order_by('t.total_cost');        $query = $this->db->get();        if ($query->num_rows() > 0) {            return $query->result();        }        else {            return '';        }    }    public function get_room_facility_details($hotelCode) {        $this->db->select('RAmenities as amenities');        $this->db->from('tg_hotels_amenties');        $this->db->where('HotelCode', $hotelCode);        $this->db->limit('1');        $query = $this->db->get();        if ($query->num_rows() > 0)            return $query->row();        else            return '';    }    public function getRoomDetails($api, $sess_id, $hotelCode, $searchId) {        $this->db->select('a.*,b.*');        $this->db->from('hotel_search_result a');        $this->db->join('tg_permanent_hotels b', 'a.hotel_code = b.hotel_code', 'left');        $this->db->where('b.hotel_code', $hotelCode);        $this->db->where('a.session_id', $sess_id);        $this->db->where('a.api', $api);        $this->db->where('a.search_id', $searchId);        $query = $this->db->get();        //echo $this->db->last_query();exit;        if ($query->num_rows() > 0) {            return $query->row();        } else {            return '';        }    }    public function insert_booking_report_data($book_refno, $ezeeRefNo, $booking_status, $Booking_Date, $Deducted_Amount,$Net_Amount,$Booking_Amount, $Admin_Markup, $Payment_Charge, $Currecy, $Xml_Currency, $Cancel_Till_Date, $Booking_Done_By,$agent_markup,$promotional_discount,$payment_type,$dealsval,$PromoPrice,$VoucherPrice,$coupon_applied) {       if ($this->session->userdata('user_logged_in')) {        $user_id = $this->session->userdata('user_id');        $Booking_Done_By = 'user';        $agent_id = 0;    } else if ($this->session->userdata('agent_logged_in')) {        $agent_id = $this->session->userdata('agent_id');        $Booking_Done_By = 'agent';        $user_id = 0;    } else {        $agent_id = 0;        $user_id = 0;        $Booking_Done_By = 'guest';    }    $passenger_info = $this->session->userdata('passenger_info');				//$promotional_discount = 0;		//$promotional_code = '';		/*if(!empty($passenger_info['user_promotional'])) {			$promotional_code = $passenger_info['user_promotional'];			$promtional = $this->get_promotional_code($promotional_code);			if(empty($promtional)) {			} else {				$service = explode(',',$promtional->service_type);				if(in_array(1,$service)) {					$expire = $promtional->promo_expire;					if(strtotime($expire) >= strtotime(date('Y-m-d'))) {						if($promtional->discount_type == 2) {							$promotional_discount = $promtional->discount;						} else {							$promotional_discount = ($Booking_Amount * ($promtional->discount / 100));						}											} 				} 			}							}	*/	        $session_data = $this->session->userdata('hotel_search_data');        $data = array('user_id' => $user_id,            'agent_id' => $agent_id,            'Api_Name' => 'travelguru',            'Hotel_RefNo' => $book_refno,            'Booking_RefNo' => $book_refno,            'uniqueRefNo' => $ezeeRefNo,            'Booking_Status' => $booking_status,            'Booking_Date' => $Booking_Date,            // 'Net_Amount' => $Net_Amount,            'Deducted_Amount' => $Net_Amount,            'Booking_Amount' => $Net_Amount,            'deals'=>$dealsval,            'total_cost' => ($Booking_Amount+$Payment_Charge),            'Admin_Markup' => $Admin_Markup,            'Payment_Charge' => $Payment_Charge,            'Agent_Markup' => $agent_markup,            'currency_conv_value' => $Net_Amount,            'Currecy' => $Currecy,            'ROE'=>1,            'Xml_Currency' => $Xml_Currency,            'Cancel_Till_Date' => $Cancel_Till_Date,            'Booking_Done_By' => $Booking_Done_By,            'payment_type'=>$payment_type,            'search_array' => serialize($session_data),            'PromoPrice' => $PromoPrice,            'VoucherPrice' => $VoucherPrice,            'coupon_applied' => $coupon_applied            //'promotional_discount' => $promotional_discount,			            //'Promotional_Code' => $promotional_code,					            //'Payment_Method' => $passenger_info['payment_type'],			         );       $this->db->insert('hotel_booking_reports', $data);        //echo $this->db->last_query();exit;	       return $this->db->insert_id();   }   public function checkincheckout($hotel_code){    $queryh=$this->db->select('time_checkin,time_checkout')->where('hotel_code',$hotel_code)->from('tg_hotel_overview')->get();    return $queryh->row();}public function insert_hotel_booking_information_data($ezeeRefNo, $hotel_code, $hotel_name, $city_code, $check_in, $check_out, $voucher_date, $city, $room_type, $inclusion, $star, $address, $room_count, $cancellation_policy, $adults_count, $childs_count, $description, $phone, $fax, $image, $nights, $api, $adults, $childs, $childs_ages) {    $room_type1=$inclusion1=array();    for($r=0;$r<$room_count;$r++){        $room_type1[]= $room_type;        $inclusion1[]= $inclusion;    }    $room_type=implode(',', $room_type1);    if(!empty($inclusion)){        $inclusion=implode(',', $inclusion1);    }    // $queryh=$this->db->select('time_checkin,time_checkout')->where('hotel_code',$hotel_code)->from('tg_hotel_overview')->get();    $resho=$this->checkincheckout($hotel_code);    // echo '<pre>'; print_r($room_type);exit;    $data = array(        'uniqueRefNo' => $ezeeRefNo,        'hotel_code' => $hotel_code,        'hotel_name' => $hotel_name,        'city_code' => $city_code,        'check_in' => $check_in,        'check_out' => $check_out,        'voucher_date' => $voucher_date,        'city' => $city,        'room_type' => ucwords(strtolower($room_type)),        'inclusion'=>$inclusion,        //'star' => $star,        'address' => $address,        'room_count' => $room_count,        'cancellation_policy' => $cancellation_policy,        'adult' => $adults_count,        'child' => $childs_count,        'description' => $description,        'phone' => $phone,        'fax' => $fax,        'image' => $image,        'nights' => $nights,        'api' => $api,        'checkintime'=>$resho->time_checkin,        'checkouttime'=>$resho->time_checkout        // 'comment_desc' => $comp_pol        );    // echo '<pre>'; print_r($data);exit;    $this->db->insert('hotel_booking_hotels_info', $data);    //echo $this->db->last_query();exit;    $insert_id = $this->db->insert_id();    if ($insert_id) {        $adt = 0;        $chd = 0;        for ($i = 0; $i < $room_count; $i++) {            $passenger_info = $this->session->userdata('passenger_info');            $adultTitles = $passenger_info['adults_title'];            $adultFNames = $passenger_info['adults_fname'];            $adultLNames = $passenger_info['adults_lname'];            // $adultDOBDate = $passenger_info['adultDOBDate'];            if (isset($passenger_info['childs_title'])) {                $childTitles = $passenger_info['childs_title'];                $childFNames = $passenger_info['childs_fname'];                $childLNames = $passenger_info['childs_lname'];                // $childDOBDate = $passenger_info['childDOBDate'];            }            $city   = $passenger_info['user_city'];            $mobile = $passenger_info['user_mobile'];            $email = $passenger_info['user_email'];            $address = $passenger_info['address'];            $country = $passenger_info['user_country'];            for ($a = 0; $a < $adults[$i]; $a++) {                $adult_data = array(                    'uniqueRefNo' => $ezeeRefNo,                    'passenger_type' => 'adult',                    'title' => $adultTitles[$adt],                    'first_name' => $adultFNames[$adt],                    'last_name' => $adultLNames[$adt],                    // 'dob'=>$adultDOBDate[$adt],                    'room_no' => $i + 1,                    'mobile' => $mobile,                    'email' => $email,                    'city' => $city,                    'country' => $country,                    'address' => $address,                    );                $this->db->insert('hotel_booking_passengers_info', $adult_data);                $adt++;            }            if (array_key_exists($i, $childs) && $childs[$i] != '') {                if (isset($childs_ages[$i]) && $childs_ages[$i] != '') {                    $age = $childs_ages[$i];                    $cage = explode(',', $age);                } else {                    $cage = 0;                }                for ($c = 0; $c < $childs[$i]; $c++) {                    $child_data = array(                        'uniqueRefNo' => $ezeeRefNo,                        'passenger_type' => 'child',                        'title' => $childTitles[$chd],                        'first_name' => $childFNames[$chd],                        'last_name' => $childLNames[$chd],                        // 'dob'=>$childDOBDate[$chd],                        'room_no' => $i + 1,                        'child_age' => $cage[$c]                        );                    $this->db->insert('hotel_booking_passengers_info', $child_data);                    $chd++;                }            }        }    }    return true;}function delete_multiple_rooms($session_id,$uniqueRefNo, $hotel_code, $id) {    $this->db->where('uniqueRefNo',$uniqueRefNo);    $this->db->where('session_id', $session_id);    $this->db->where('hotel_code', $hotel_code);    $this->db->where('search_id !=', $id);    $this->db->delete('hotel_search_result');}function insert_hotel_temp_results($sess_id,$uniqueRefNo, $api_name, $RoomID, $RatePlanCode, $AmountBeforeTax, $Taxesval, $Discountval, $netrate,$amttosend,$taxtosend, $RoomTypename, $NonSmoking, $adultMaxOccupancy, $childMaxOccupancy, $NonRefundable, $RatePlanDescriptionval, $RatePlanInclusionDesciptionval, $DiscountCouponDisplayIndicatorval, $HotelCode, $HotelType, $DeepLinkInformationval, $admin_markup,$agent_markup,  $payment_charge, $total_amount, $Roomdescription, $Cancelpolicyval, $Roomimage,$percent) {    $this->db->set('curr_date_time', 'NOW()', FALSE);    $data = array(        'session_id' => $sess_id,        'uniqueRefNo' => $uniqueRefNo,        'api' => $api_name,        'hotel_code' => $HotelCode,        'room_code' => $RoomID,        'room_type' => ucwords(strtolower($RoomTypename)),        'adult_max_occ' => $adultMaxOccupancy,        'child_max_occ' => $childMaxOccupancy,        'non_smoking' => $NonSmoking,        'rate_plan_code' => $RatePlanCode,        'non_refundable' => $NonRefundable,        'rate_plan_description' => $RatePlanDescriptionval,        'inclusion' => $RatePlanInclusionDesciptionval,            //'discount_coupon_indicator' => $DiscountCouponDisplayIndicatorval,        'amount_before_tax' => $AmountBeforeTax,        'tax' => $Taxesval,        'discount_coupon' => $Discountval,        'net_amount' => $netrate,        'amount_to_send' => $amttosend,        'tax_to_send' => $taxtosend,        'admin_markup' => $admin_markup,        'agent_markup' => $agent_markup,        'payment_charge' => $payment_charge,        'hotel_type' => $HotelType,           //'deep_link_information' => $DeepLinkInformationval,        'total_amount' => $total_amount,        'total_cost'=>$total_amount,           //'room_description' => $Roomdescription,        'cancellation_policy' => $Cancelpolicyval,        'cancel_policy' => $Cancelpolicyval,        'room_image' => $Roomimage,        'discount'=>$percent        );    $this->db->insert('hotel_search_result', $data);}function update_hotel_temp_results($sess_id,$uniqueRefNo, $RoomID, $HotelCode, $Cancelpolicyval, $Roomdescription, $Roomimage) {    $this->db->set('curr_date_time', 'NOW()', FALSE);    $data = array(        'cancellation_policy' => $Cancelpolicyval,        'room_description' => $Roomdescription,        'room_image' => $Roomimage        );    $this->db->where('room_type_code', $RoomID);    $this->db->where('hotel_code', $HotelCode);    $this->db->where('uniqueRefNo', $uniqueRefNo);    $this->db->where('session_id', $sess_id);    $this->db->update('hotel_search_result', $data);}function getCountries() {    $this->db->select('name');    $this->db->from('country');    $query = $this->db->get();    if ($query->num_rows > 0) {        return $query->result();    } else {        return '';    }	}function get_admin_markup($nationality) {  $admin_markup_process = 1;	  $this->db->select('name');  $this->db->from('country');  $this->db->where('iso2', $nationality);  $this->db->limit('1');  $query = $this->db->get();  $res = $query->row();  $country = $res->name;  $this->db->select('markup,markup_process');  $this->db->from('b2c_markup_info');  $this->db->where('markup_type', 'specific');  $this->db->where('country', $country);  $this->db->where('service_type', 1);  $this->db->where('api_name', 'travelguru');  $this->db->where('status', 1);  $this->db->limit('1');  $query1 = $this->db->get();  if ($query1->num_rows > 0) {    $res1 = $query1->row();    $admin_markup_val = $res1->markup;    $admin_markup_process = $res1->markup_process;			} else {    $this->db->select('markup,markup_process');    $this->db->from('b2c_markup_info');    $this->db->where('markup_type', 'generic');    $this->db->where('service_type', 1);    $this->db->where('api_name', 'travelguru');    $this->db->where('status', 1);    $this->db->limit('1');    $query2 = $this->db->get();    if ($query2->num_rows > 0) {        $res2 = $query2->row();        $admin_markup_val = $res2->markup;        $admin_markup_process = $res2->markup_process;    } else {        $admin_markup_val = 0;    }}return array($admin_markup_val,$admin_markup_process);}function get_payment_charge() {    $this->db->select('charge');    $this->db->from('payment_gateway');    $this->db->where('service_type', 1);    $this->db->where('status', 1);    $this->db->limit('1');    $query = $this->db->get();    if ($query->num_rows > 0) {        $res = $query->row();        $payment_charge_val = $res->charge;    } else {        $payment_charge_val = 0;    }    return $payment_charge_val;}function get_admin_agent_markup($agent_no,$nationality) {  $agent_markup_process = 1;	   $this->db->select('name');  $this->db->from('country');  $this->db->where('iso2', $nationality);  $this->db->limit('1');  $query = $this->db->get();  $res = $query->row();  $country = $res->name;	   $this->db->select('markup,markup_process');  $this->db->from('b2b_markup_info');  $this->db->where('markup_type', 'specific');  $this->db->where('country', $country);		  $this->db->where('agent_no', $agent_no);  $this->db->where('service_type', 1);  $this->db->where('api_name', 'travelguru');  $this->db->where('status', 1);  $this->db->limit('1');  $query1 = $this->db->get();  if ($query1->num_rows > 0) {    $res1 = $query1->row();    $agent_markup_val = $res1->markup;    $agent_markup_process = $res1->markup_process;} else {    $this->db->select('markup,markup_process');    $this->db->from('b2b_markup_info');    $this->db->where('markup_type', 'generic');    $this->db->where('agent_no', $agent_no);    $this->db->where('service_type', 1);    $this->db->where('api_name', 'travelguru');    $this->db->where('status', 1);    $this->db->limit('1');    $query2 = $this->db->get();    if ($query2->num_rows > 0) {        $res2 = $query2->row();        $agent_markup_val = $res2->markup;        $agent_markup_process = $res2->markup_process;    } else {        $agent_markup_val = 0;    }}return array($agent_markup_val,$agent_markup_process);}function get_agent_markup($agent_no) {    $this->db->select('markup');    $this->db->from('agent_markup_manager');    $this->db->where('agent_no', $agent_no);    $this->db->where('service_type', '1B');    $this->db->where('status', 1);    $this->db->limit('1');    $query = $this->db->get();    if ($query->num_rows > 0) {        $res = $query->row();        $agent_markup = $res->markup;    } else {        $agent_markup = 0;    }    return $agent_markup;}function get_agent_available_balance( $agent_no) {	     $this->db->select('available_balance')    ->from('agent_acc_summary')    ->where('agent_no', $agent_no)    ->order_by('transaction_datetime', 'DESC')    ->limit('1');    $query = $this->db->get();    if ($query->num_rows > 0) {     $res = $query->result();     $balance = $res[0]->available_balance; } else {     $balance = 0; } return  $balance;	}public function insert_withdraw_status($agent_id, $agent_no, $withdraw_amount, $total, $BOOKING_REFERENCE_NO) {    $disc_tran = 'Regarding Hotel Booking Ref: ' . $BOOKING_REFERENCE_NO;    $data['status'] = 'Accepted';    $data['available_balance'] = $total;    $data['agent_no'] = $agent_no;    $data['transaction_summary'] = $disc_tran;    $data['agent_id'] = $agent_id;    $data['withdraw_amount'] = $withdraw_amount;    $this->db->set('approve_date', 'NOW()', FALSE);    $this->db->set('transaction_datetime', 'NOW()', FALSE);    if ($this->db->insert('agent_acc_summary', $data)) {        return true;    } else {        return false;    }}		public function insert_deposit_refund($agent_id, $agent_no, $cancel_amount, $total, $BOOKING_REFERENCE_NO) {    $disc_tran = 'Regarding Hotel Cancellation Ref: ' . $BOOKING_REFERENCE_NO;    $data['status'] = 'Accepted';    $data['available_balance'] = $total;    $data['agent_no'] = $agent_no;    $data['transaction_summary'] = $disc_tran;    $data['agent_id'] = $agent_id;    $data['deposit_amount'] = $cancel_amount;    $this->db->set('approve_date', 'NOW()', FALSE);    $this->db->set('transaction_datetime', 'NOW()', FALSE);    if ($this->db->insert('agent_acc_summary', $data)) {        return true;    } else {        return false;    }}			public function get_passenger_info($RefNo) {    $this->db->select('*');    $this->db->from('hotel_booking_passengers_info');    $this->db->where('uniqueRefNo', $RefNo);    $this->db->limit('1');    $query = $this->db->get();    if ($query->num_rows > 0) {        return $query->row();    } else {        return '';    }	}public function update_booking_status($Booking_reference_ID,$Amount) {  $data['Cancellation_Status'] = 'Cancelled';  $data['Cancellation_Charge'] = $Amount;  $data['Cancel_Till_Date'] = date('Y-m-d');  $where = "Booking_RefNo = '$Booking_reference_ID'";  if ($this->db->update('hotel_booking_reports', $data, $where)) {     return true; } else {     return false; }}public function pay_details($payinsert) {    $this->db->insert('axis_details', $payinsert);    $insert_id = $this->db->insert_id();    return $insert_id;}	public function paypal_details($payinsert) {    $this->db->insert('paypal_details', $payinsert);    $insert_id = $this->db->insert_id();    return $insert_id;	}				public function get_promotional_code($promo_code) {    $this->db->select('*')    ->from('promotion_manager')    ->where('promo_code', $promo_code)    ->where('status', 1)    ->limit('1');    $query = $this->db->get();    if ($query->num_rows > 0) {     return $query->row();     $balance = $res[0]->available_balance; } else {     return ''; }	}	public function update_rx_search($total,$payment_charge,$sessionId,$hotelCode,$searchId){    $data=array(        'total_cost'=>$total,        'payment_charge'=>$payment_charge,        );    $this->db->where('search_id',$searchId);    $this->db->where('session_id',$sessionId);    $this->db->where('hotel_code',$hotelCode);    $this->db->update('hotel_search_result',$data);}public function get_city_code($id) {    $this->db->select('*')->from('ace_jac_roomsxml_gta_city')->where('id', $id);    $query = $this->db->get();       //echo  $this->db->last_query();exit;    if ($query->num_rows() > 0) {        $city_code = $query->row();        return $city_code->tg_city_name;    } else {        return '';    }}public function get_hotel_booking_report($unique_ref) {      //  $this->db->select('hr.*,hh.city as hotel_city,hh.*,hp.*')   $this->db->select('hr.*,hh.city as hotel_city,hh.*,hp.*')   ->from('hotel_booking_reports hr')   ->join('hotel_booking_hotels_info hh', 'hr.uniqueRefNo = hh.uniqueRefNo')   ->join('hotel_booking_passengers_info hp', 'hr.uniqueRefNo = hp.uniqueRefNo')   ->where('hr.uniqueRefNo', $unique_ref);                          // ->where('hr.Booking_RefNo', $booking_ref)               // ->where('hr.agent_id',0);//                ->where('hp.email', $user_email)//                ->where('hp.mobile', $mobile_no);              //  ->order_by('hr.report_id', 'DESC')                //->group_by('hp.AL_RefNo');   $query = $this->db->get();//echo $this->db->last_query();exit;   if ($query->num_rows > 0) {    return $query->row();}return false;}}?>